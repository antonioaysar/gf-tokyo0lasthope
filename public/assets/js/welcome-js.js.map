{"version":3,"sources":["starlight.js"],"names":[],"mappingsfile":"welcome-js.js","sourcesContent":["/*Starlight.js: A sparkling visual effects library\r\nCreated by Serj Babayan\r\nView on Github at https://www.github.com/sergei1152/Starlight.js\r\nLicence: MIT\r\n*/\r\n\r\n//TODO Fix resizing issues\r\n//TODO 1: ADD SVG support\r\n//TODO 2: FIX the keep_list true and rotation false instant expand glitch\r\n\r\nvar starlightCtrl = (function() {\r\n\t\r\n\t//put your custom configuration settings here\r\n\tvar user_configuration={\r\n\t\tshape:\"circle\", //could be \"circle\" or \"square\"\r\n\t\tinitial_size:\"1px\", //initial size of the stars\r\n\t\tfinal_size:\"3px\", //final size of the stars after expansion\r\n\t\texpand_speed:\"1s\", //how fast the stars get bigger, in milliseconds\r\n\t\tfade_delay:\"0.5s\", //how long until the star fades out\r\n\t\tfade_duration:\"0.5s\", //how long the star fades for\r\n\t\tcolors:[\"#FFF\"], //The variety of colors of the stars. Can be any CSS complient color (eg. HEX, rgba, hsl)\r\n\t\tfrequency:100, //how often a new wave of stars pop-out (in milliseconds. Bigger==longer)\r\n\t\tdensity: 10,//how many stars pop out per wave\r\n\t\tkeep_lit: false, //whether the stars disappear after they are created\r\n\t\trotation: false, //whether the stars rotate through out their expansion\r\n\t\tcoverage:0.75, //how much of the element's area the stars will show up in (0-1)\r\n\t\ttarget_class:'.starlight', //the elements the script will target based on the class name\r\n\t\tcustom_svg:\"\" //if you want to use a custom svg with a shape of a star instead (not supported yet)\r\n\t};\r\n\t\r\n\t//this is if you want to really customize how the stars appear\r\n\tvar advanced_configuration={\r\n\t\texpand_transition_timing: \"linear\", //could be ease, ease-in, ease-out, etc\r\n\t\texpand_delay: \"0s\",  //how long until the star starts to expand\r\n\t\trotation_transition_timing: \"linear\",  //could be ease, ease-in, ease-out, etc\r\n\t\trotation_angle: \"360deg\", //up to how much to rotate to\r\n\t\trotation_duration: \"1s\", //how long the rotation will take place\r\n\t\trotation_delay: \"0s\", //how long until rotation starts\r\n\t  \tfade_transition_timing:\"linear\", //could be ease, ease-in, ease-out, etc\r\n\t  \tz_index:0 //the stars are absolutely positioned, so you can give them a z-index of whatever you wish\r\n\t};\r\n\t\r\n\tvar refreshIntervalId;\r\n\t\r\n\t//the star object with its position\r\n\tfunction Star(width,height){\r\n\t\t//the offsets are required so that when a user specifies a coverage, the coverage is based around the center of the div, and not the top left\r\n\t\tleftOffset=Math.round((width-width*user_configuration.coverage)/2);\r\n\t\ttopOffset=(height-Math.round(height*user_configuration.coverage))/2;\r\n\t\tthis.xposition=Math.floor(Math.random()*width*user_configuration.coverage)+leftOffset;\r\n\t\tthis.yposition=Math.floor(Math.random()*height*user_configuration.coverage)+topOffset;\r\n\t}\r\n\t\r\n\t//the star CSS properties\r\n\tStar.prototype.create=function(parent_element,id){\r\n\t\t//The container is there so that when the stars expand they exapand around the center\r\n\t\tvar star=$('<div></div>');\r\n\t\tvar star_container=$('<div id=\\\"starlight-star'+id+'\\\"></div>');\r\n\t\t// star_container.attr(\"id\",\"star\"+id);\r\n\t\tstar_container.append(star);\r\n\t\r\n\t\t//so the star stays centered as its container expands\r\n\t\tstar.css({\r\n\t\t\tposition: \"absolute\",\r\n\t    \ttop: \"-50%\",\r\n\t    \tleft: \"-50%\",\r\n\t    \twidth:\"100%\",\r\n\t    \theight:\"100%\"\r\n\t\t});\r\n\t\r\n\t\t//the initial CSS properties of the star, including color, position, and size\r\n\t\tstar_container.css({\r\n\t\t\twidth:user_configuration.initial_size,\r\n\t\t\theight:user_configuration.initial_size,\r\n\t\t\tposition:'absolute',\r\n\t\t\ttop:this.yposition,\r\n\t\t\tleft:this.xposition,\r\n\t\t\t\"z-index\": advanced_configuration.z_index\r\n\t\t});\r\n\t\r\n\t\t//sets transition css properties of the star\r\n\t\tsetTimeout(function(){\r\n\t\t\tstar_container.css({ //size expand properties\r\n\t\t\t\ttransition: \"height \"+user_configuration.expand_speed+\" \"+advanced_configuration.expand_transition_timing+\" \"+advanced_configuration.expand_delay+\",\"+\r\n\t\t\t\t\t\t\t\"width \"+user_configuration.expand_speed+\" \"+advanced_configuration.expand_transition_timing+\" \"+advanced_configuration.expand_delay,\r\n\t\t\t\twidth:user_configuration.final_size,\r\n\t\t\t\theight:user_configuration.final_size\r\n\t\t\t});\r\n\t\r\n\t    //because transition properties override each other, have to create a variable for transition and append transitions on to it\r\n\t    if(user_configuration.rotation){ //rotation properties\r\n\t      star.css({\r\n\t        transform: \"rotate(\"+advanced_configuration.rotation_angle+\")\"\r\n\t      });\r\n\t      var transition=advanced_configuration.rotation_duration+\" \"+advanced_configuration.rotation_transition_timing+\" \"+advanced_configuration.rotation_delay;\r\n\t    }\r\n\t\r\n\t    if(!user_configuration.keep_lit) {//fading properties\r\n\t      star.css({\r\n\t        opacity: 0\r\n\t        });\r\n\t      if(transition){\r\n\t        transition+=\",opacity \" + user_configuration.fade_duration + \" \" + advanced_configuration.fade_transition_timing + \" \" + user_configuration.fade_delay;\r\n\t      }\r\n\t      else {\r\n\t        var transition=\"opacity \" + user_configuration.fade_duration + \" \" + advanced_configuration.fade_transition_timing + \" \" + user_configuration.fade_delay;\r\n\t      }\r\n\t\r\n\t      \t//removes the element from the dom after it fades out\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\t$(\"#starlight-star\"+id).remove();\r\n\t\t\t},css_time_to_milliseconds(user_configuration.fade_duration)+css_time_to_milliseconds(user_configuration.fade_delay));\r\n\t      }\r\n\t\r\n\t    if(transition) {\r\n\t      star.css({\r\n\t        transition: transition\r\n\t      });\r\n\t    }\r\n\t\r\n\t\t\t},10);\r\n\t\t\r\n\t\t//sets shape and color of the star\r\n\t\tif(user_configuration.shape==='circle'){\r\n\t\t\tstar.css('border-radius','50%');\r\n\t\t}\r\n\t\tif(user_configuration.custom_svg==='' || user_configuration.custom_svg===false){\r\n\t\t\tstar.css('background-color',user_configuration.colors[Math.floor(Math.random()*user_configuration.colors.length)]); //picks one of the colors\r\n\t\t}\r\n\t\tparent_element.append(star_container);\r\n\t};\r\n\t\r\n\t\r\n\t//Handles the actual creation of the stars based on the frequency and density as defined by the user\r\n\tvar initStarlight = function(){\t\t\t\r\n\t\tvar id=0;\r\n\t\t//traverses all of the elements with a class of 'starlight'\r\n\t\t$(user_configuration.target_class).each(function(index){\r\n\t\t\tvar currentElement=$(this);\r\n\t\t\tvar width=currentElement.width();\r\n\t\t\tvar height=currentElement.height();\r\n\t\t\trefreshIntervalId = setInterval(function(){ //creates the stars based on the frequency and desired density\r\n\t\t\t\tfor(var i=0;i<user_configuration.density;i++){\r\n\t\t\t\t\tvar newStar=new Star(width,height);\r\n\t\t\t\t\tnewStar.create(currentElement,id);\r\n\t\t\t\t\tnewStar=null; //just in case so the garbage collector clears this value up\r\n\t\t\t\t\tid++;\r\n\t\t\t\t}\r\n\t\t\t},user_configuration.frequency);\r\n\t\t});\r\n\t};\r\n\t\t\r\n\t\r\n\t\r\n\t//retrieved from https://gist.github.com/jakebellacera/9261266\r\n\tfunction css_time_to_milliseconds(time_string) {\r\n\t  var num = parseFloat(time_string, 10),\r\n\t      unit = time_string.match(/m?s/),\r\n\t      milliseconds;\r\n\t \r\n\t  if (unit) {\r\n\t    unit = unit[0];\r\n\t  }\r\n\t \r\n\t  switch (unit) {\r\n\t    case \"s\": // seconds\r\n\t      milliseconds = num * 1000;\r\n\t      break;\r\n\t    case \"ms\": // milliseconds\r\n\t      milliseconds = num;\r\n\t      break;\r\n\t    default:\r\n\t      milliseconds = 0;\r\n\t      break;\r\n\t  }\r\n\t \r\n\t  return milliseconds;\r\n\t}\r\n\t\r\n\treturn {\r\n\t\tinit: function(){\t\r\n\t\t\tdocument.getElementById('site-wrapper-id').classList.add('starlight');\r\n\t\t\tinitStarlight();\t\t\r\n\t\t},\r\n\t\trestart: function(){\r\n\t\t\t\r\n\t\t\tclearInterval(refreshIntervalId);\r\n\t\t\t $(document).ready(function () {\r\n\t\t\t\t \r\n\t\t\t\tif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstarlightCtrl.init();\r\n\t\t\t\t}\t\t\t\t \r\n\t\t\t });\r\n\t\t}\r\n\t}\r\n\t\r\n})();\r\n\r\nif( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\r\n\t//do nothing\r\n} else {\r\n\tstarlightCtrl.init();\r\n\twindow.onresize = starlightCtrl.restart;\r\n}\r\n\r\n"]}